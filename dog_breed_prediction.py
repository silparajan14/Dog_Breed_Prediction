# -*- coding: utf-8 -*-
"""Dog_Breed_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uBEIx2w2d1oK2fyMlAAt2bnVb_eQhmY6

# **Dog Breed Prediction**

In this project, we will see how to use Keras and TensorFlow to build, train, and test a Convolutional Neural Network capable of identifying the breed of a dog in a supplied image. This is a supervised learning problem, specifically a multiclass classification problem.
"""

# Run this cell and select the kaggle.json file downloaded
# from the Kaggle account settings page.
from google.colab import files
files.upload()

"""We will start by connecting to Kaggle using Kaggle API"""

# install the Kaggle API client.
!pip install -q kaggle

"""Next we will install Kaggle API using pip installation."""

# The Kaggle API client expects this file to be in ~/.kaggle, so move it there.
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

# This permissions change avoids a warning on Kaggle tool startup.
!chmod 600 ~/.kaggle/kaggle.json

"""Setting up Kaggle using Kaggle API."""

# Commented out IPython magic to ensure Python compatibility.
# Creating directory and changing the current working directory
!mkdir dog_dataset
# %cd dog_dataset

"""To store the data we will create a new directory and make it as current working directory."""

# Searching for dataset
!kaggle datasets list -s dogbreedidfromcomp

"""Searching Kaggle for the required dataset using search option(-s) with title 'dogbreedidfromcomp'."""

# Commented out IPython magic to ensure Python compatibility.
# Downloading dataset and coming out of directory
!kaggle datasets download catherinehorng/dogbreedidfromcomp
# %cd ..

"""After searching the data next step would be downloading the data into collab notebook using references found in search option."""

# Unzipping downloaded file and removing unusable file
!unzip dog_dataset/dogbreedidfromcomp.zip -d dog_dataset
!rm dog_dataset/dogbreedidfromcomp.zip
!rm dog_dataset/sample_submission.csv

# Important library imports
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from tqdm import tqdm
from keras.preprocessing import image
from sklearn.preprocessing import label_binarize
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.optimizers import Adam

# Read the labels.csv file and checking shape and records
labels_all = pd.read_csv("dog_dataset/labels.csv")
print(labels_all.shape)
labels_all.head()

"""Here we analysed that labels contains 10222 rows and 2 columns."""

# Visualize the number of each breeds
breeds_all = labels_all["breed"]
breed_counts = breeds_all.value_counts()
breed_counts.head()

"""Here we are finding out the count per class i.e. total data in each class using value_counts() function."""

# Selecting first 3 breeds (Limitation due to computation power)
CLASS_NAMES = ['scottish_deerhound','maltese_dog','bernese_mountain_dog']
labels = labels_all[(labels_all['breed'].isin(CLASS_NAMES))]
labels = labels.reset_index()
labels.head()

"""We will work on only 3 breeds due to limited computational power."""

# Creating numpy matrix with zeros
X_data = np.zeros((len(labels), 224, 224, 3), dtype='float32')
# One hot encoding
Y_data = label_binarize(labels['breed'], classes = CLASS_NAMES)

# Reading and converting image to numpy array and normalizing dataset
for i in tqdm(range(len(labels))):
    img = image.load_img('dog_dataset/train/%s.jpg' % labels['id'][i], target_size=(224, 224))
    img = image.img_to_array(img)
    x = np.expand_dims(img.copy(), axis=0)
    X_data[i] = x / 255.0

# Printing train image and one hot encode shape & size
print('\nTrain Images shape: ',X_data.shape,' size: {:,}'.format(X_data.size))
print('One-hot encoded output shape: ',Y_data.shape,' size: {:,}'.format(Y_data.size))

"""As we are working with the classification dataset first we need to one hot encode the target value i.e. the classes. After that we will read images and convert them into numpy array and finally normalizing the array."""

# Building the Model
model = Sequential()

model.add(Conv2D(filters = 64, kernel_size = (5,5), activation ='relu', input_shape = (224,224,3)))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters = 32, kernel_size = (3,3), activation ='relu', kernel_regularizer = 'l2'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters = 16, kernel_size = (7,7), activation ='relu', kernel_regularizer = 'l2'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters = 8, kernel_size = (5,5), activation ='relu', kernel_regularizer = 'l2'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(128, activation = "relu", kernel_regularizer = 'l2'))
model.add(Dense(64, activation = "relu", kernel_regularizer = 'l2'))
model.add(Dense(len(CLASS_NAMES), activation = "softmax"))

model.compile(loss = 'categorical_crossentropy', optimizer = Adam(0.0001),metrics=['accuracy'])

model.summary()

"""Next we will create a network architecture for the model. We have used different types of layers according to their features namely Conv_2d (It is used to create a convolutional kernel that is convolved with the input layer to produce the output tensor), max_pooling2d (It is a downsampling technique which takes out the maximum value over the window defined by poolsize), flatten (It flattens the input and creates a 1D output), Dense (Dense layer produce the output as the dot product of input and kernel).

After defining the network architecture we found out the total parameters as 162,619.
"""

# Splitting the data set into training and testing data sets
X_train_and_val, X_test, Y_train_and_val, Y_test = train_test_split(X_data, Y_data, test_size = 0.1)
# Splitting the training data set into training and validation data sets
X_train, X_val, Y_train, Y_val = train_test_split(X_train_and_val, Y_train_and_val, test_size = 0.2)

"""After defining the network architecture we will start with splitting the test and train data then dividing train data in train and validation data."""

# Training the model
epochs = 100
batch_size = 128

history = model.fit(X_train, Y_train, batch_size = batch_size, epochs = epochs,
                    validation_data = (X_val, Y_val))

# Plot the training history
plt.figure(figsize=(12, 5))
plt.plot(history.history['accuracy'], color='r')
plt.plot(history.history['val_accuracy'], color='b')
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epochs')
plt.legend(['train', 'val'])

plt.show()

"""Here we analyse how the model is learning with each epoch in terms of accuracy."""

Y_pred = model.predict(X_test)
score = model.evaluate(X_test, Y_test)
print('Accuracy over the test set: \n ', round((score[1]*100), 2), '%')

# Plotting image to compare
plt.imshow(X_test[1,:,:,:])
plt.show()

# Finding max value from predition list and comaparing original value vs predicted
print("Originally : ",labels['breed'][np.argmax(Y_test[1])])
print("Predicted : ",labels['breed'][np.argmax(Y_pred[1])])

"""Here you can see image with its original and predicted label.

# Conclusion:

This model can be used to predict different breeds of dogs which can be further used by different NGO's working on saving animals and for educational purposes also.

# Saving Model
"""

model.save("dog_breed.h5")

"""# Gradio"""

!pip install gradio

!pip install tensorflow

import gradio as gr
from tensorflow.keras.models import load_model
import numpy as np
from tensorflow.keras.preprocessing import image

# Load your pre-trained model
model = load_model('/content/dog_breed.h5')

# Define the function for prediction
def predict_breed(image):
    # Convert Gradio's PIL image to a numpy array
    image = np.array(image)

    # Preprocess the image (resize, normalize, etc.)
    image = image / 255.0  # Assuming you need to normalize

    # Make prediction using your model
    Y_pred = model.predict(np.expand_dims(image, axis=0))

    # Assuming Y_pred is a one-hot encoded array, get the predicted class index
    predicted_class_index = np.argmax(Y_pred)

    # Map the class index to the actual breed (you'll need a mapping)
    def class_index_to_breed(class_index):
      CLASS_NAMES = ['scottish_deerhound', 'maltese_dog', 'bernese_mountain_dog']
      return CLASS_NAMES[class_index]

    breed = class_index_to_breed(predicted_class_index)  # Implement this function

    return breed

# Define a Gradio interface
iface = gr.Interface(
    fn=predict_breed,
    inputs=gr.inputs.Image(shape=(224, 224)),  # Assuming your model expects 224x224 images
    outputs=gr.outputs.Label(),
    live=True
)

# Launch the Gradio app
iface.launch()



